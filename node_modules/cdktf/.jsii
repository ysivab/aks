{
  "author": {
    "name": "HashiCorp",
    "roles": [
      "author"
    ],
    "url": "https://hashicorp.com"
  },
  "bundled": {
    "archiver": "5.3.0",
    "json-stable-stringify": "^1.0.1"
  },
  "dependencies": {
    "constructs": "^10.0.25"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Cloud Development Kit for Terraform",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/hashicorp/terraform-cdk",
  "jsiiVersion": "1.52.1",
  "license": "MPL-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "cdktf",
  "readme": {
    "markdown": "# cdktf\n\ncdktf is a framework for defining cloud infrastructure using Terraform providers and modules. It allows for\nusers to define infrastructure resources using higher-level programming languages.\n\n## Build\n\nInstall dependencies\n\n```bash\nyarn install\n```\n\nBuild the package\n\n```bash\nyarn build\n```\n"
  },
  "repository": {
    "directory": "packages/cdktf",
    "type": "git",
    "url": "https://github.com/hashicorp/terraform-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "cdktf.testingMatchers": {
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 15
      },
      "symbolId": "lib/testing/matchers:"
    }
  },
  "targets": {
    "dotnet": {
      "namespace": "HashiCorp.Cdktf",
      "packageId": "HashiCorp.Cdktf"
    },
    "go": {
      "moduleName": "github.com/hashicorp/terraform-cdk-go",
      "packageName": "cdktf"
    },
    "java": {
      "maven": {
        "artifactId": "cdktf",
        "groupId": "com.hashicorp"
      },
      "package": "com.hashicorp.cdktf"
    },
    "js": {
      "npm": "cdktf"
    },
    "python": {
      "distName": "cdktf",
      "module": "cdktf"
    }
  },
  "types": {
    "cdktf.AnnotationMetadataEntryType": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnnotationMetadataEntryType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/annotations.ts",
        "line": 6
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "WARN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ERROR"
        }
      ],
      "name": "AnnotationMetadataEntryType",
      "symbolId": "lib/annotations:AnnotationMetadataEntryType"
    },
    "cdktf.Annotations": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Includes API for attaching annotations such as warning messages to constructs."
      },
      "fqn": "cdktf.Annotations",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/annotations.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the annotations API for a construct scope."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 23
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The scope."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.Annotations"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The toolkit will fail synthesis when errors are reported.",
            "stability": "experimental",
            "summary": "Adds an { \"error\": <message> } metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 65
          },
          "name": "addError",
          "parameters": [
            {
              "docs": {
                "summary": "The error message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The CLI will display the info message when apps are synthesized.",
            "stability": "experimental",
            "summary": "Adds an info metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 56
          },
          "name": "addInfo",
          "parameters": [
            {
              "docs": {
                "summary": "The info message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The CLI will display the warning when an app is synthesized.\nIn a future release the CLI might introduce a --strict flag which\nwill then fail the synthesis if it encounters a warning.",
            "stability": "experimental",
            "summary": "Adds a warning metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 45
          },
          "name": "addWarning",
          "parameters": [
            {
              "docs": {
                "summary": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Annotations",
      "symbolId": "lib/annotations:Annotations"
    },
    "cdktf.AnyMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnyMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 102
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 101
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 107
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "AnyMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 104
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 103
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:AnyMap"
    },
    "cdktf.App": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a cdktf application."
      },
      "fqn": "cdktf.App",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an app."
        },
        "locationInModule": {
          "filename": "lib/app.ts",
          "line": 64
        },
        "parameters": [
          {
            "docs": {
              "summary": "configuration options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "cdktf.AppOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 42
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 87
          },
          "name": "isApp",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 91
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources."
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 136
          },
          "name": "crossStackReference",
          "parameters": [
            {
              "name": "fromStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            },
            {
              "name": "toStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            },
            {
              "name": "identifier",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes all resources to the output directory."
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 114
          },
          "name": "synth"
        }
      ],
      "name": "App",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 53
          },
          "name": "manifest",
          "type": {
            "fqn": "cdktf.Manifest"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The output directory into which resources will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 46
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether to skip the validation during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 58
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If not set, all stacks will be synthesized.",
            "stability": "experimental",
            "summary": "The stack which will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 51
          },
          "name": "targetStackId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/app:App"
    },
    "cdktf.AppOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AppOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 11
      },
      "name": "AppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context",
            "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`.",
            "stability": "experimental",
            "summary": "Additional context values for the application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 29
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "stability": "experimental",
            "summary": "The directory to output Terraform resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 17
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Whether to skip the validation during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 36
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 18
          },
          "name": "stackTraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/app:AppOptions"
    },
    "cdktf.ArtifactoryBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ArtifactoryBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ArtifactoryBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ArtifactoryBackend",
      "symbolId": "lib/backends/artifactory-backend:ArtifactoryBackend"
    },
    "cdktf.ArtifactoryBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ArtifactoryBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 40
      },
      "name": "ArtifactoryBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 42
          },
          "name": "password",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 44
          },
          "name": "repo",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 45
          },
          "name": "subpath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 43
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 41
          },
          "name": "username",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/artifactory-backend:ArtifactoryBackendProps"
    },
    "cdktf.Aspects": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis."
      },
      "fqn": "cdktf.Aspects",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/aspect.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the `Aspects` object associated with a construct scope."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 26
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The scope for which these aspects will apply."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.Aspects"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an aspect to apply this scope before synthesis."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 50
          },
          "name": "add",
          "parameters": [
            {
              "docs": {
                "summary": "The aspect to add."
              },
              "name": "aspect",
              "type": {
                "fqn": "cdktf.IAspect"
              }
            }
          ]
        }
      ],
      "name": "Aspects",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The list of aspects which were directly applied on this scope."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 57
          },
          "name": "all",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IAspect"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/aspect:Aspects"
    },
    "cdktf.AssetType": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AssetType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 23
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DIRECTORY"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ARCHIVE"
        }
      ],
      "name": "AssetType",
      "symbolId": "lib/terraform-asset:AssetType"
    },
    "cdktf.AzurermBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AzurermBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.AzurermBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "AzurermBackend",
      "symbolId": "lib/backends/azurerm-backend:AzurermBackend"
    },
    "cdktf.AzurermBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AzurermBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 40
      },
      "name": "AzurermBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 42
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 43
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 41
          },
          "name": "storageAccountName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 51
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 53
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 54
          },
          "name": "clientSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 45
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 44
          },
          "name": "environment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 48
          },
          "name": "msiEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 52
          },
          "name": "resourceGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 50
          },
          "name": "sasToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 46
          },
          "name": "subscriptionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 47
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 49
          },
          "name": "useMsi",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/backends/azurerm-backend:AzurermBackendProps"
    },
    "cdktf.BooleanMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 89
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 88
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 94
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "BooleanMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 91
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 90
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanMap"
    },
    "cdktf.ComplexComputedList": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexComputedList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 117
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "complexComputedListIndex",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "optional": true,
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 116
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 51
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 23
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 45
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 19
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 15
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 27
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 39
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 11
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 33
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 126
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.IInterpolatingParent",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "ComplexComputedList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 120
          },
          "name": "complexComputedListIndex",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 119
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 118
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 121
          },
          "name": "wrapsSet",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexComputedList"
    },
    "cdktf.ComplexObject": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexObject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 145
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "isSingleItem",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 144
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 51
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 23
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 45
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 19
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 15
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 27
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 39
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 11
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 33
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 159
          },
          "name": "interpolationAsList",
          "protected": true,
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 153
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.IInterpolatingParent",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "ComplexObject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 148
          },
          "name": "isSingleItem",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 147
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 146
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexObject"
    },
    "cdktf.ConsulBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ConsulBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ConsulBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ConsulBackend",
      "symbolId": "lib/backends/consul-backend:ConsulBackend"
    },
    "cdktf.ConsulBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ConsulBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 40
      },
      "name": "ConsulBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 42
          },
          "name": "accessToken",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 41
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 43
          },
          "name": "address",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 49
          },
          "name": "caFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 50
          },
          "name": "certFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 45
          },
          "name": "datacenter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 47
          },
          "name": "gzip",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 46
          },
          "name": "httpAuth",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 51
          },
          "name": "keyFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 48
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 44
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/consul-backend:ConsulBackendProps"
    },
    "cdktf.CosBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.CosBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.CosBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CosBackend",
      "symbolId": "lib/backends/cos-backend:CosBackend"
    },
    "cdktf.CosBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.CosBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 40
      },
      "name": "CosBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 44
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 48
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 47
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 46
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 45
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 43
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 41
          },
          "name": "secretId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 42
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/cos-backend:CosBackendProps"
    },
    "cdktf.DataTerraformRemoteState": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteState",
      "symbolId": "lib/backends/remote-backend:DataTerraformRemoteState"
    },
    "cdktf.DataTerraformRemoteStateArtifactory": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateArtifactory",
      "symbolId": "lib/backends/artifactory-backend:DataTerraformRemoteStateArtifactory"
    },
    "cdktf.DataTerraformRemoteStateArtifactoryConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ArtifactoryBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 48
      },
      "name": "DataTerraformRemoteStateArtifactoryConfig",
      "symbolId": "lib/backends/artifactory-backend:DataTerraformRemoteStateArtifactoryConfig"
    },
    "cdktf.DataTerraformRemoteStateAzurerm": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateAzurerm",
      "symbolId": "lib/backends/azurerm-backend:DataTerraformRemoteStateAzurerm"
    },
    "cdktf.DataTerraformRemoteStateAzurermConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.AzurermBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 57
      },
      "name": "DataTerraformRemoteStateAzurermConfig",
      "symbolId": "lib/backends/azurerm-backend:DataTerraformRemoteStateAzurermConfig"
    },
    "cdktf.DataTerraformRemoteStateConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 9
      },
      "name": "DataTerraformRemoteStateConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 11
          },
          "name": "defaults",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 10
          },
          "name": "workspace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-remote-state:DataTerraformRemoteStateConfig"
    },
    "cdktf.DataTerraformRemoteStateConsul": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsul",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConsulConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateConsul",
      "symbolId": "lib/backends/consul-backend:DataTerraformRemoteStateConsul"
    },
    "cdktf.DataTerraformRemoteStateConsulConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ConsulBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 54
      },
      "name": "DataTerraformRemoteStateConsulConfig",
      "symbolId": "lib/backends/consul-backend:DataTerraformRemoteStateConsulConfig"
    },
    "cdktf.DataTerraformRemoteStateCos": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCos",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateCosConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateCos",
      "symbolId": "lib/backends/cos-backend:DataTerraformRemoteStateCos"
    },
    "cdktf.DataTerraformRemoteStateCosConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.CosBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 51
      },
      "name": "DataTerraformRemoteStateCosConfig",
      "symbolId": "lib/backends/cos-backend:DataTerraformRemoteStateCosConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcd": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcd",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 28
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 27
      },
      "name": "DataTerraformRemoteStateEtcd",
      "symbolId": "lib/backends/etcd-backend:DataTerraformRemoteStateEtcd"
    },
    "cdktf.DataTerraformRemoteStateEtcdConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 44
      },
      "name": "DataTerraformRemoteStateEtcdConfig",
      "symbolId": "lib/backends/etcd-backend:DataTerraformRemoteStateEtcdConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateEtcdV3",
      "symbolId": "lib/backends/etcdv3-backend:DataTerraformRemoteStateEtcdV3"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdV3BackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 51
      },
      "name": "DataTerraformRemoteStateEtcdV3Config",
      "symbolId": "lib/backends/etcdv3-backend:DataTerraformRemoteStateEtcdV3Config"
    },
    "cdktf.DataTerraformRemoteStateGcs": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcs",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateGcsConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateGcs",
      "symbolId": "lib/backends/gcs-backend:DataTerraformRemoteStateGcs"
    },
    "cdktf.DataTerraformRemoteStateGcsConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.GcsBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 48
      },
      "name": "DataTerraformRemoteStateGcsConfig",
      "symbolId": "lib/backends/gcs-backend:DataTerraformRemoteStateGcsConfig"
    },
    "cdktf.DataTerraformRemoteStateHttp": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttp",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 28
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateHttpConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 27
      },
      "name": "DataTerraformRemoteStateHttp",
      "symbolId": "lib/backends/http-backend:DataTerraformRemoteStateHttp"
    },
    "cdktf.DataTerraformRemoteStateHttpConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.HttpBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 52
      },
      "name": "DataTerraformRemoteStateHttpConfig",
      "symbolId": "lib/backends/http-backend:DataTerraformRemoteStateHttpConfig"
    },
    "cdktf.DataTerraformRemoteStateLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 44
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateLocalConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 43
      },
      "name": "DataTerraformRemoteStateLocal",
      "symbolId": "lib/backends/local-backend:DataTerraformRemoteStateLocal"
    },
    "cdktf.DataTerraformRemoteStateLocalConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.LocalBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 62
      },
      "name": "DataTerraformRemoteStateLocalConfig",
      "symbolId": "lib/backends/local-backend:DataTerraformRemoteStateLocalConfig"
    },
    "cdktf.DataTerraformRemoteStateManta": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateManta",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateMantaConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateManta",
      "symbolId": "lib/backends/manta-backend:DataTerraformRemoteStateManta"
    },
    "cdktf.DataTerraformRemoteStateMantaConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.MantaBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 51
      },
      "name": "DataTerraformRemoteStateMantaConfig",
      "symbolId": "lib/backends/manta-backend:DataTerraformRemoteStateMantaConfig"
    },
    "cdktf.DataTerraformRemoteStateOss": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOss",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 28
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateOssConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 27
      },
      "name": "DataTerraformRemoteStateOss",
      "symbolId": "lib/backends/oss-backend:DataTerraformRemoteStateOss"
    },
    "cdktf.DataTerraformRemoteStateOssConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.OssBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 63
      },
      "name": "DataTerraformRemoteStateOssConfig",
      "symbolId": "lib/backends/oss-backend:DataTerraformRemoteStateOssConfig"
    },
    "cdktf.DataTerraformRemoteStatePg": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePg",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStatePgConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStatePg",
      "symbolId": "lib/backends/pg-backend:DataTerraformRemoteStatePg"
    },
    "cdktf.DataTerraformRemoteStatePgConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.PgBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 46
      },
      "name": "DataTerraformRemoteStatePgConfig",
      "symbolId": "lib/backends/pg-backend:DataTerraformRemoteStatePgConfig"
    },
    "cdktf.DataTerraformRemoteStateRemoteConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.RemoteBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 57
      },
      "name": "DataTerraformRemoteStateRemoteConfig",
      "symbolId": "lib/backends/remote-backend:DataTerraformRemoteStateRemoteConfig"
    },
    "cdktf.DataTerraformRemoteStateS3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateS3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 30
      },
      "name": "DataTerraformRemoteStateS3",
      "symbolId": "lib/backends/s3-backend:DataTerraformRemoteStateS3"
    },
    "cdktf.DataTerraformRemoteStateS3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.S3BackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 69
      },
      "name": "DataTerraformRemoteStateS3Config",
      "symbolId": "lib/backends/s3-backend:DataTerraformRemoteStateS3Config"
    },
    "cdktf.DataTerraformRemoteStateSwift": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwift",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 28
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 27
      },
      "name": "DataTerraformRemoteStateSwift",
      "symbolId": "lib/backends/swift-backend:DataTerraformRemoteStateSwift"
    },
    "cdktf.DataTerraformRemoteStateSwiftConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.SwiftBackendProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 67
      },
      "name": "DataTerraformRemoteStateSwiftConfig",
      "symbolId": "lib/backends/swift-backend:DataTerraformRemoteStateSwiftConfig"
    },
    "cdktf.DefaultTokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Default resolver implementation."
      },
      "fqn": "cdktf.DefaultTokenResolver",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/tokens/resolvable.ts",
          "line": 142
        },
        "parameters": [
          {
            "name": "concat",
            "type": {
              "fqn": "cdktf.IFragmentConcatenator"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITokenResolver"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 141
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 185
          },
          "name": "resolveList",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized map."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 216
          },
          "name": "resolveMap",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized number list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 203
          },
          "name": "resolveNumberList",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve string fragments to Tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 178
          },
          "name": "resolveString",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "fragments",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it.",
            "stability": "experimental",
            "summary": "Default Token resolution."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 150
          },
          "name": "resolveToken",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "DefaultTokenResolver",
      "symbolId": "lib/tokens/resolvable:DefaultTokenResolver"
    },
    "cdktf.EncodingOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties to string encodings."
      },
      "fqn": "cdktf.EncodingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 311
      },
      "name": "EncodingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no display hint",
            "stability": "experimental",
            "summary": "A hint for the Token's purpose when stringifying it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 316
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/token:EncodingOptions"
    },
    "cdktf.EtcdBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdBackend",
      "symbolId": "lib/backends/etcd-backend:EtcdBackend"
    },
    "cdktf.EtcdBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 37
      },
      "name": "EtcdBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 39
          },
          "name": "endpoints",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 38
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 41
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 40
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/etcd-backend:EtcdBackendProps"
    },
    "cdktf.EtcdV3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdV3Backend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdV3BackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdV3Backend",
      "symbolId": "lib/backends/etcdv3-backend:EtcdV3Backend"
    },
    "cdktf.EtcdV3BackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.EtcdV3BackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 40
      },
      "name": "EtcdV3BackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 41
          },
          "name": "endpoints",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 46
          },
          "name": "cacertPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 47
          },
          "name": "certPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 48
          },
          "name": "keyPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 45
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 43
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 44
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 42
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/etcdv3-backend:EtcdV3BackendProps"
    },
    "cdktf.Fn": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.Fn",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-functions.ts",
        "line": 147
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/abs.html abs} returns the absolute value of the given number."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 866
          },
          "name": "abs",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/abspath.html abspath} takes a string containing a filesystem path and converts it to an absolute path."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 739
          },
          "name": "abspath",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/anytrue.html anytrue} returns true if all elements in a given collection are true or \"true\"."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 152
          },
          "name": "alltrue",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/anytrue.html anytrue} returns true if any element in a given collection is true or \"true\"."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 160
          },
          "name": "anytrue",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/base64decode.html base64decode} takes a string containing a Base64 character sequence and returns the original string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 639
          },
          "name": "base64decode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/base64encode.html base64encode} takes a string containing a Base64 character sequence and returns the original string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 647
          },
          "name": "base64encode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/base64gzip.html base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 655
          },
          "name": "base64gzip",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha256.html base64sha256} computes the SHA256 hash of a given string and encodes it with Base64."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 463
          },
          "name": "base64sha256",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha512.html base64sha512} computes the SHA512 hash of a given string and encodes it with Base64."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 471
          },
          "name": "base64sha512",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/basename.html basename} takes a string containing a filesystem path and removes all except the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 763
          },
          "name": "basename",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/bcrypt.html bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in the Modular Crypt Format usually expected in the shadow password file on many Unix systems."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 480
          },
          "name": "bcrypt",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "cost",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/can.html can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1132
          },
          "name": "can",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/ceil.html ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 874
          },
          "name": "ceil",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/chomp.html chomp} removes newline characters at the end of a string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 947
          },
          "name": "chomp",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/chunklist.html chunklist} splits a single list into fixed-size chunks, returning a list of lists."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 169
          },
          "name": "chunklist",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "chunkSize",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/cidrhost.html cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 818
          },
          "name": "cidrhost",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "hostnum",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/cidrnetmask.html cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 831
          },
          "name": "cidrnetmask",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnet.html cidrsubnet} calculates a subnet address within given IP network address prefix."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 841
          },
          "name": "cidrsubnet",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newbits",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "netnum",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnets.html cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 856
          },
          "name": "cidrsubnets",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newbits",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/coalesce.html coalesce} takes any number of arguments and returns the first one that isn't null or an empty string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 182
          },
          "name": "coalesce",
          "parameters": [
            {
              "docs": {
                "summary": "- Arguments are passed in an array."
              },
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/coalescelist.html coalescelist} takes any number of list arguments and returns the first one that isn't empty."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 190
          },
          "name": "coalescelist",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "collection": {
                      "elementtype": {
                        "primitive": "any"
                      },
                      "kind": "array"
                    }
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/compact.html compact} takes a list of strings and returns a new list with any empty string elements removed."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 200
          },
          "name": "compact",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/concat.html concat} takes two or more lists and combines them into a single list."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 208
          },
          "name": "concat",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "collection": {
                      "elementtype": {
                        "primitive": "any"
                      },
                      "kind": "array"
                    }
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/contains.html contains} determines whether a given list or set contains a given single value as one of its elements."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 217
          },
          "name": "contains",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/csvdecode.html csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 663
          },
          "name": "csvdecode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/dirname.html dirname} takes a string containing a filesystem path and removes the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 747
          },
          "name": "dirname",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/distinct.html distinct} takes a list and returns a new list with any duplicate elements removed."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 227
          },
          "name": "distinct",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/element.html element} retrieves a single element from a list."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 236
          },
          "name": "element",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/file.html file} takes a string containing a filesystem path and removes all except the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 771
          },
          "name": "file",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64.html filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 798
          },
          "name": "filebase64",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha256.html filebase64sha256} is a variant of base64sha256 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 488
          },
          "name": "filebase64sha256",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha512.html filebase64sha512} is a variant of base64sha512 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 498
          },
          "name": "filebase64sha512",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/fileexists.html fileexists} determines whether a file exists at a given path."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 779
          },
          "name": "fileexists",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filemd5.html filemd5} is a variant of md5 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 508
          },
          "name": "filemd5",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/fileset.html fileset} enumerates a set of regular file names given a path and pattern."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 788
          },
          "name": "fileset",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filesha1.html filesha1} is a variant of sha1 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 516
          },
          "name": "filesha1",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filesha256.html filesha256} is a variant of sha256 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 524
          },
          "name": "filesha256",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/filesha512.html filesha512} is a variant of sha512 that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 532
          },
          "name": "filesha512",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/flatten.html flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 249
          },
          "name": "flatten",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/floor.html floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 882
          },
          "name": "floor",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/format.html format} produces a string by formatting a number of other values according to a specification string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 956
          },
          "name": "format",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/formatdate.html formatdate} converts a timestamp into a different time format."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 605
          },
          "name": "formatdate",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "timestamp",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/formatlist.html formatlist} produces a list of strings by formatting a number of other values according to a specification string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 967
          },
          "name": "formatlist",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/indent.html indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 978
          },
          "name": "indent",
          "parameters": [
            {
              "name": "indentation",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/index.html index} finds the element index for a given value in a list."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 258
          },
          "name": "index",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/join.html join} produces a string by concatenating together all elements of a given list of strings with the given delimiter."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 992
          },
          "name": "join",
          "parameters": [
            {
              "name": "separator",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/jsondecode.html jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 671
          },
          "name": "jsondecode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/jsonencode.html jsonencode} encodes a given value to a string using JSON syntax."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 679
          },
          "name": "jsonencode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/keys.html keys} takes a map and returns a list containing the keys from that map."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 268
          },
          "name": "keys",
          "parameters": [
            {
              "name": "map",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.IResolvable"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "map"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/length.html length} determines the length of a given list, map, or string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 276
          },
          "name": "lengthOf",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/log.html log} returns the logarithm of a given number in a given base."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 891
          },
          "name": "log",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "base",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/lookup.html lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 286
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "key",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "defaultValue",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/lower.html lower} converts all cased letters in the given string to lowercase."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1005
          },
          "name": "lower",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/matchkeys.html matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 302
          },
          "name": "matchkeys",
          "parameters": [
            {
              "name": "valuesList",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "keysList",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "searchSet",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/max.html max} takes one or more numbers and returns the greatest number from the set."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 901
          },
          "name": "max",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/md5.html md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 540
          },
          "name": "md5",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 320
          },
          "name": "merge",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/min.html min} takes one or more numbers and returns the smallest number from the set."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 909
          },
          "name": "min",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/nonsensitive.html nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1140
          },
          "name": "nonsensitive",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/one.html one} takes a list, set, or tuple value with either zero or one elements."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 328
          },
          "name": "one",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/parseint.html parseInt} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 918
          },
          "name": "parseInt",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "base",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/pathexpand.html pathexpand} takes a string containing a filesystem path and removes the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 755
          },
          "name": "pathexpand",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/pow.html pow} calculates an exponent, by raising its first argument to the power of the second argument."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 929
          },
          "name": "pow",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "power",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/range.html range} generates a list of numbers using a start value, a limit value, and a step value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 338
          },
          "name": "range",
          "parameters": [
            {
              "name": "start",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "limit",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "step",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use this function to wrap a string and escape it properly for the use in Terraform This is only needed in certain scenarios (e.g., if you have unescaped double quotes in the string)."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1213
          },
          "name": "rawString",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/regexall.html regexall} applies a regular expression to a string and returns a list of all matches."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1014
          },
          "name": "regexall",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/replace.html replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1026
          },
          "name": "replace",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "substring",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "replacement",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/reverse.html reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 348
          },
          "name": "reverse",
          "parameters": [
            {
              "name": "values",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/rsadecrypt.html rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 549
          },
          "name": "rsadecrypt",
          "parameters": [
            {
              "name": "ciphertext",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "privatekey",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sensitive.html sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for sensitive input variables."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1148
          },
          "name": "sensitive",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/setintersection.html setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 356
          },
          "name": "setintersection",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/setproduct.html setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the Cartesian product."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 366
          },
          "name": "setproduct",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html setsubtract} function returns a new set containing the elements from the first set that are not present in the second set."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 375
          },
          "name": "setsubtract",
          "parameters": [
            {
              "name": "minuend",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "subtrahend",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/setunion.html setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 391
          },
          "name": "setunion",
          "parameters": [
            {
              "docs": {
                "summary": "- Arguments are passed in an array."
              },
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sha1.html sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 562
          },
          "name": "sha1",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sha256.html sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 570
          },
          "name": "sha256",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sha512.html sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 578
          },
          "name": "sha512",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/signum.html signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 939
          },
          "name": "signum",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html slice} extracts some consecutive elements from within a list."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 401
          },
          "name": "slice",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "startindex",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "endindex",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sort.html sort} takes a list of strings and returns a new list with those strings sorted lexicographically."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 419
          },
          "name": "sort",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/split.html split} produces a list by dividing a given string at all occurrences of a given separator."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1041
          },
          "name": "split",
          "parameters": [
            {
              "name": "seperator",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/strrev.html strrev} reverses the characters in a string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1051
          },
          "name": "strrev",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/substr.html substr} extracts a substring from a given string by offset and length."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1061
          },
          "name": "substr",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "offset",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "length",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/sum.html sum} takes a list or set of numbers and returns the sum of those numbers."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 427
          },
          "name": "sum",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/templatefile.html templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 807
          },
          "name": "templatefile",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "vars",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/textdecodebase64.html textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 688
          },
          "name": "textdecodebase64",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "encodingName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/textencodebase64.html textencodebase64}  encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 702
          },
          "name": "textencodebase64",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "encodingName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/timeadd.html timeadd} adds a duration to a timestamp, returning a new timestamp."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 619
          },
          "name": "timeadd",
          "parameters": [
            {
              "name": "timestamp",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "duration",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/timestamp.html timestamp} returns a UTC timestamp string in RFC 3339 format."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 631
          },
          "name": "timestamp",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/title.html title} converts the first letter of each word in the given string to uppercase."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1075
          },
          "name": "title",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/tobool.html tobool} converts its argument to a boolean value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1156
          },
          "name": "tobool",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/tolist.html tolist} converts its argument to a list value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1164
          },
          "name": "tolist",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/tomap.html tomap} converts its argument to a map value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1172
          },
          "name": "tomap",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/tonumber.html tonumber} converts its argument to a number value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1180
          },
          "name": "tonumber",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/toset.html toset} converts its argument to a set value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1188
          },
          "name": "toset",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/tostring.html tostring} converts its argument to a string value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1196
          },
          "name": "tostring",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/transpose.html transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 435
          },
          "name": "transpose",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/trim.html trim} removes the specified characters from the start and end of the given string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1084
          },
          "name": "trim",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "replacement",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/trimprefix.html trimprefix} removes the specified prefix from the start of the given string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1095
          },
          "name": "trimprefix",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/trimspace.html trimspace} removes any space characters from the start and end of the given string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1116
          },
          "name": "trimspace",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/trimsuffix.html trimsuffix} removes the specified suffix from the end of the given string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1106
          },
          "name": "trimsuffix",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "suffix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/try.html try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1204
          },
          "name": "try",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/upper.html upper} converts all cased letters in the given string to uppercase."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 1124
          },
          "name": "upper",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/urlencode.html urlencode} applies URL encoding to a given string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 715
          },
          "name": "urlencode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/uuid.html uuid} generates a unique identifier string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 585
          },
          "name": "uuid",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/uuidv5.html uuidv5} generates a unique identifier string."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 594
          },
          "name": "uuidv5",
          "parameters": [
            {
              "name": "namespace",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/values.html values} takes a map and returns a list containing the values of the elements in that map."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 443
          },
          "name": "values",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/yamldecode.html yamldecode} parses a string as a subset of YAML, and produces a representation of its value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 723
          },
          "name": "yamldecode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/yamlencode.html yamlencode} encodes a given value to a string using JSON syntax."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 731
          },
          "name": "yamlencode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://www.terraform.io/docs/language/functions/zipmap.html zipmap} constructs a map from a list of keys and a corresponding list of values."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 452
          },
          "name": "zipmap",
          "parameters": [
            {
              "name": "keyslist",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            },
            {
              "name": "valueslist",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        }
      ],
      "name": "Fn",
      "symbolId": "lib/terraform-functions:Fn"
    },
    "cdktf.GcsBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.GcsBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.GcsBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "GcsBackend",
      "symbolId": "lib/backends/gcs-backend:GcsBackend"
    },
    "cdktf.GcsBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.GcsBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 40
      },
      "name": "GcsBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 41
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 43
          },
          "name": "accessToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 42
          },
          "name": "credentials",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 45
          },
          "name": "encryptionKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 44
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/gcs-backend:GcsBackendProps"
    },
    "cdktf.HttpBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.HttpBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.HttpBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "HttpBackend",
      "symbolId": "lib/backends/http-backend:HttpBackend"
    },
    "cdktf.HttpBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.HttpBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 37
      },
      "name": "HttpBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 38
          },
          "name": "address",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 40
          },
          "name": "lockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 41
          },
          "name": "lockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 45
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 47
          },
          "name": "retryMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 49
          },
          "name": "retryWaitMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 48
          },
          "name": "retryWaitMin",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 46
          },
          "name": "skipCertVerification",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 42
          },
          "name": "unlockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 43
          },
          "name": "unlockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 39
          },
          "name": "updateMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 44
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/http-backend:HttpBackendProps"
    },
    "cdktf.IAnyProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy untyped value producers."
      },
      "fqn": "cdktf.IAnyProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 39
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 43
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IAnyProducer",
      "symbolId": "lib/tokens/lazy:IAnyProducer"
    },
    "cdktf.IAspect": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Aspect."
      },
      "fqn": "cdktf.IAspect",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/aspect.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "All aspects can visit an IConstruct."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 14
          },
          "name": "visit",
          "parameters": [
            {
              "name": "node",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "IAspect",
      "symbolId": "lib/aspect:IAspect"
    },
    "cdktf.IFragmentConcatenator": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it could potentially be exposed over jsii.",
        "stability": "experimental",
        "summary": "Function used to concatenate symbols in the target document language."
      },
      "fqn": "cdktf.IFragmentConcatenator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 112
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Join the fragment on the left and on the right."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 116
          },
          "name": "join",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IFragmentConcatenator",
      "symbolId": "lib/tokens/resolvable:IFragmentConcatenator"
    },
    "cdktf.IInterpolatingParent": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IInterpolatingParent",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-addressable.ts",
        "line": 6
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-addressable.ts",
            "line": 7
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "IInterpolatingParent",
      "symbolId": "lib/terraform-addressable:IInterpolatingParent"
    },
    "cdktf.IListProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy list producers."
      },
      "fqn": "cdktf.IListProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 19
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the list value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 23
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IListProducer",
      "symbolId": "lib/tokens/lazy:IListProducer"
    },
    "cdktf.IManifest": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 21
      },
      "name": "IManifest",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 22
          },
          "name": "stacks",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackManifest"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 23
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:IManifest"
    },
    "cdktf.INumberProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy number producers."
      },
      "fqn": "cdktf.INumberProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 29
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the number value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 33
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "INumberProducer",
      "symbolId": "lib/tokens/lazy:INumberProducer"
    },
    "cdktf.IPostProcessor": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
      },
      "fqn": "cdktf.IPostProcessor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 62
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Process the completely resolved value, after full recursion/resolution has happened."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 66
          },
          "name": "postProcess",
          "parameters": [
            {
              "name": "input",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IPostProcessor",
      "symbolId": "lib/tokens/resolvable:IPostProcessor"
    },
    "cdktf.IRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IRemoteWorkspace",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 47
      },
      "name": "IRemoteWorkspace",
      "symbolId": "lib/backends/remote-backend:IRemoteWorkspace"
    },
    "cdktf.IResolvable": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Tokens are special objects that participate in synthesis.",
        "stability": "experimental",
        "summary": "Interface for values that can be resolvable later."
      },
      "fqn": "cdktf.IResolvable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 37
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 49
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 56
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IResolvable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 44
          },
          "name": "creationStack",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/tokens/resolvable:IResolvable"
    },
    "cdktf.IResolveContext": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Current resolution context for tokens."
      },
      "fqn": "cdktf.IResolveContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Use this postprocessor after the entire token structure has been resolved."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 29
          },
          "name": "registerPostProcessor",
          "parameters": [
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve an inner object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 24
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IResolveContext",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "True when we are still preparing, false if we're rendering the final output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 19
          },
          "name": "preparing",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution has been initiated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 14
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        }
      ],
      "symbolId": "lib/tokens/resolvable:IResolveContext"
    },
    "cdktf.IResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IResource",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 4
      },
      "name": "IResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 8
          },
          "name": "stack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ],
      "symbolId": "lib/resource:IResource"
    },
    "cdktf.IResourceConstructor": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IResourceConstructor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 11
      },
      "name": "IResourceConstructor",
      "symbolId": "lib/resource:IResourceConstructor"
    },
    "cdktf.IScopeCallback": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IScopeCallback",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 13
      },
      "name": "IScopeCallback",
      "symbolId": "lib/testing/index:IScopeCallback"
    },
    "cdktf.IStackSynthesizer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Encodes information how a certain Stack should be deployed inspired by AWS CDK v2 implementation (synth functionality was removed in constructs v10)."
      },
      "fqn": "cdktf.IStackSynthesizer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synthesize/types.ts",
        "line": 7
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Synthesize the associated stack to the session."
          },
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 11
          },
          "name": "synthesize",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "cdktf.ISynthesisSession"
              }
            }
          ]
        }
      ],
      "name": "IStackSynthesizer",
      "symbolId": "lib/synthesize/types:IStackSynthesizer"
    },
    "cdktf.IStringProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy string producers."
      },
      "fqn": "cdktf.IStringProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 9
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the string value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 13
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IStringProducer",
      "symbolId": "lib/tokens/lazy:IStringProducer"
    },
    "cdktf.ISynthesisSession": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Passed into `TerraformStack.onSynthesize()` methods.\noriginally from aws/constructs lib v3.3.126 (synth functionality was removed in constructs v10)",
        "stability": "experimental",
        "summary": "Represents a single session of synthesis."
      },
      "fqn": "cdktf.ISynthesisSession",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synthesize/types.ts",
        "line": 18
      },
      "name": "ISynthesisSession",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 26
          },
          "name": "manifest",
          "type": {
            "fqn": "cdktf.Manifest"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The output directory for this synthesis session."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 22
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 24
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/synthesize/types:ISynthesisSession"
    },
    "cdktf.ITerraformAddressable": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformAddressable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-addressable.ts",
        "line": 2
      },
      "name": "ITerraformAddressable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-addressable.ts",
            "line": 3
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-addressable:ITerraformAddressable"
    },
    "cdktf.ITerraformDependable": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformDependable",
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-dependable.ts",
        "line": 3
      },
      "name": "ITerraformDependable",
      "symbolId": "lib/terraform-dependable:ITerraformDependable"
    },
    "cdktf.ITerraformResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformResource",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 21
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "ITerraformResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 13
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 14
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 12
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 17
          },
          "name": "count",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 16
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 19
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 18
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:ITerraformResource"
    },
    "cdktf.ITokenMapper": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it can be exported via jsii.",
        "stability": "experimental",
        "summary": "Interface to apply operation to tokens in a string."
      },
      "fqn": "cdktf.ITokenMapper",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 168
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Replace a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 172
          },
          "name": "mapToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenMapper",
      "symbolId": "lib/tokens/string-fragments:ITokenMapper"
    },
    "cdktf.ITokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "How to resolve tokens."
      },
      "fqn": "cdktf.ITokenResolver",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 72
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 92
          },
          "name": "resolveList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized map."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 102
          },
          "name": "resolveMap",
          "parameters": [
            {
              "name": "m",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized number list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 97
          },
          "name": "resolveNumberList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "(May use concatenation)",
            "stability": "experimental",
            "summary": "Resolve a string with at least one stringified token in it."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 87
          },
          "name": "resolveString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 76
          },
          "name": "resolveToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenResolver",
      "symbolId": "lib/tokens/resolvable:ITokenResolver"
    },
    "cdktf.Lazy": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis.",
        "stability": "experimental",
        "summary": "Lazily produce a value."
      },
      "fqn": "cdktf.Lazy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 102
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produces a lazy token from an untyped value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 140
          },
          "name": "anyValue",
          "parameters": [
            {
              "docs": {
                "summary": "The lazy producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IAnyProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyAnyValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a list-ified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 128
          },
          "name": "listValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IListProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyListValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a numberified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 119
          },
          "name": "numberValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.INumberProducer"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a stringified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 108
          },
          "name": "stringValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IStringProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyStringValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Lazy",
      "symbolId": "lib/tokens/lazy:Lazy"
    },
    "cdktf.LazyAnyValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating lazy untyped tokens."
      },
      "fqn": "cdktf.LazyAnyValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 80
      },
      "name": "LazyAnyValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 86
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 93
          },
          "name": "omitEmptyArray",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyAnyValueOptions"
    },
    "cdktf.LazyBase": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LazyBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/tokens/lazy.ts",
          "line": 152
        }
      },
      "interfaces": [
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 148
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 170
          },
          "name": "addPostProcessor",
          "parameters": [
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 156
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 163
          },
          "name": "resolveLazy",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Called automatically when JSON.stringify() is called on a Token.",
            "stability": "experimental",
            "summary": "Turn this Token into JSON."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 179
          },
          "name": "toJSON",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 165
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "LazyBase",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 149
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyBase"
    },
    "cdktf.LazyListValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy list token."
      },
      "fqn": "cdktf.LazyListValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 61
      },
      "name": "LazyListValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 67
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced list is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 74
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyListValueOptions"
    },
    "cdktf.LazyStringValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy string token."
      },
      "fqn": "cdktf.LazyStringValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 49
      },
      "name": "LazyStringValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 55
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyStringValueOptions"
    },
    "cdktf.LocalBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LocalBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "cdktf.LocalBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 28
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 24
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "LocalBackend",
      "symbolId": "lib/backends/local-backend:LocalBackend"
    },
    "cdktf.LocalBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LocalBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 53
      },
      "name": "LocalBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to terraform.${stackId}.tfstate",
            "stability": "experimental",
            "summary": "Path where the state file is stored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 58
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 59
          },
          "name": "workspaceDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/local-backend:LocalBackendProps"
    },
    "cdktf.Manifest": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.Manifest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/manifest.ts",
          "line": 33
        },
        "parameters": [
          {
            "name": "version",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "outdir",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IManifest"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 26
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 63
          },
          "name": "buildManifest",
          "returns": {
            "type": {
              "fqn": "cdktf.IManifest"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 38
          },
          "name": "forStack",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.StackManifest"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 70
          },
          "name": "writeToFile"
        }
      ],
      "name": "Manifest",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 27
          },
          "name": "fileName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 29
          },
          "name": "stackFileName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 28
          },
          "name": "stacksFolder",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 33
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 31
          },
          "name": "stacks",
          "overrides": "cdktf.IManifest",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackManifest"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 33
          },
          "name": "version",
          "overrides": "cdktf.IManifest",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:Manifest"
    },
    "cdktf.MantaBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MantaBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.MantaBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "MantaBackend",
      "symbolId": "lib/backends/manta-backend:MantaBackend"
    },
    "cdktf.MantaBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MantaBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 40
      },
      "name": "MantaBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 41
          },
          "name": "account",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 45
          },
          "name": "keyId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 47
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 46
          },
          "name": "insecureSkipTlsVerify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 44
          },
          "name": "keyMaterial",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 48
          },
          "name": "objectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 43
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 42
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/manta-backend:MantaBackendProps"
    },
    "cdktf.NamedRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NamedRemoteWorkspace",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 50
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 49
      },
      "name": "NamedRemoteWorkspace",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 50
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:NamedRemoteWorkspace"
    },
    "cdktf.NumberMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 74
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 73
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 79
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "NumberMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 76
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 75
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:NumberMap"
    },
    "cdktf.OssAssumeRole": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssAssumeRole",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 56
      },
      "name": "OssAssumeRole",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 57
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 58
          },
          "name": "policy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 60
          },
          "name": "sessionExpiration",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 59
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/oss-backend:OssAssumeRole"
    },
    "cdktf.OssBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.OssBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "OssBackend",
      "symbolId": "lib/backends/oss-backend:OssBackend"
    },
    "cdktf.OssBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 37
      },
      "name": "OssBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 44
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 38
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 50
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 53
          },
          "name": "assumeRole",
          "optional": true,
          "type": {
            "fqn": "cdktf.OssAssumeRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 41
          },
          "name": "ecsRoleName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 49
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 43
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 46
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 45
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 52
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 42
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 39
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 40
          },
          "name": "securityToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 51
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 47
          },
          "name": "tablestoreEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 48
          },
          "name": "tablestoreTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/oss-backend:OssBackendProps"
    },
    "cdktf.PgBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.PgBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "PgBackend",
      "symbolId": "lib/backends/pg-backend:PgBackend"
    },
    "cdktf.PgBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 40
      },
      "name": "PgBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 41
          },
          "name": "connStr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 42
          },
          "name": "schemaName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 43
          },
          "name": "skipSchemaCreation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/backends/pg-backend:PgBackendProps"
    },
    "cdktf.PrefixedRemoteWorkspaces": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PrefixedRemoteWorkspaces",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 54
        },
        "parameters": [
          {
            "name": "prefix",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 53
      },
      "name": "PrefixedRemoteWorkspaces",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 54
          },
          "name": "prefix",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:PrefixedRemoteWorkspaces"
    },
    "cdktf.RemoteBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.RemoteBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "RemoteBackend",
      "symbolId": "lib/backends/remote-backend:RemoteBackend"
    },
    "cdktf.RemoteBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 40
      },
      "name": "RemoteBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 42
          },
          "name": "organization",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 44
          },
          "name": "workspaces",
          "type": {
            "fqn": "cdktf.IRemoteWorkspace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 41
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 43
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:RemoteBackendProps"
    },
    "cdktf.ResolveOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way.",
        "stability": "experimental",
        "summary": "Options to the resolve() operation."
      },
      "fqn": "cdktf.ResolveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 290
      },
      "name": "ResolveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resolver to apply to any resolvable tokens found."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 299
          },
          "name": "resolver",
          "type": {
            "fqn": "cdktf.ITokenResolver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution is performed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 294
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether the resolution is being executed during the prepare phase or not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 305
          },
          "name": "preparing",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/token:ResolveOptions"
    },
    "cdktf.Resource": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A construct which represents a resource."
      },
      "fqn": "cdktf.Resource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 21
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 18
      },
      "name": "Resource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 19
          },
          "name": "stack",
          "overrides": "cdktf.IResource",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ],
      "symbolId": "lib/resource:Resource"
    },
    "cdktf.S3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.S3Backend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.S3BackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "S3Backend",
      "symbolId": "lib/backends/s3-backend:S3Backend"
    },
    "cdktf.S3BackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.S3BackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 40
      },
      "name": "S3BackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 41
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 42
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 47
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 46
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 55
          },
          "name": "assumeRolePolicy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 59
          },
          "name": "dynamodbEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 50
          },
          "name": "dynamodbTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 45
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 44
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 56
          },
          "name": "externalId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 62
          },
          "name": "forcePathStyle",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 60
          },
          "name": "iamEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 49
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 66
          },
          "name": "maxRetries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 51
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 43
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 54
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 48
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 57
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 52
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 63
          },
          "name": "skipCredentialsValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 64
          },
          "name": "skipMetadataApiCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 65
          },
          "name": "sseCustomerKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 61
          },
          "name": "stsEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 53
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 58
          },
          "name": "workspaceKeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/s3-backend:S3BackendProps"
    },
    "cdktf.StackAnnotation": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StackAnnotation",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 6
      },
      "name": "StackAnnotation",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 7
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 8
          },
          "name": "level",
          "type": {
            "fqn": "cdktf.AnnotationMetadataEntryType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 9
          },
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 10
          },
          "name": "stacktrace",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/manifest:StackAnnotation"
    },
    "cdktf.StackManifest": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StackManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 12
      },
      "name": "StackManifest",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 17
          },
          "name": "annotations",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackAnnotation"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 14
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 18
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 13
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 15
          },
          "name": "synthesizedStackPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 16
          },
          "name": "workingDirectory",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:StackManifest"
    },
    "cdktf.StringConcat": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Drops 'undefined's.",
        "stability": "experimental",
        "summary": "Converts all fragments to strings and concats those."
      },
      "fqn": "cdktf.StringConcat",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "cdktf.IFragmentConcatenator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 124
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Join the fragment on the left and on the right."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 125
          },
          "name": "join",
          "overrides": "cdktf.IFragmentConcatenator",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "StringConcat",
      "symbolId": "lib/tokens/resolvable:StringConcat"
    },
    "cdktf.StringMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 59
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 58
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 64
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "StringMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 61
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 60
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:StringMap"
    },
    "cdktf.SwiftBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.SwiftBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.SwiftBackendProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 18
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 14
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "SwiftBackend",
      "symbolId": "lib/backends/swift-backend:SwiftBackend"
    },
    "cdktf.SwiftBackendProps": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.SwiftBackendProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 37
      },
      "name": "SwiftBackendProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 40
          },
          "name": "container",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 45
          },
          "name": "applicationCredentialId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 46
          },
          "name": "applicationCredentialName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 47
          },
          "name": "applicationCredentialSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 63
          },
          "name": "archiveContainer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 38
          },
          "name": "authUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 60
          },
          "name": "cacertFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 61
          },
          "name": "cert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 39
          },
          "name": "cloud",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 58
          },
          "name": "defaultDomain",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 52
          },
          "name": "domainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 53
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 64
          },
          "name": "expireAfter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 59
          },
          "name": "insecure",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 62
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 44
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 57
          },
          "name": "projectDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 56
          },
          "name": "projectDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 49
          },
          "name": "regionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 41
          },
          "name": "stateName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 50
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 51
          },
          "name": "tenantName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 48
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 55
          },
          "name": "userDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 54
          },
          "name": "userDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 43
          },
          "name": "userId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 42
          },
          "name": "userName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/swift-backend:SwiftBackendProps"
    },
    "cdktf.TerraformAsset": {
      "assembly": "cdktf",
      "base": "cdktf.Resource",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformAsset",
      "initializer": {
        "docs": {
          "remarks": "Assets copy referenced files into the stacks context for further usage in other resources.",
          "stability": "experimental",
          "summary": "A Terraform Asset takes a file or directory outside of the CDK for Terraform context and moves it into it."
        },
        "locationInModule": {
          "filename": "lib/terraform-asset.ts",
          "line": 46
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformAssetConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 32
      },
      "name": "TerraformAsset",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 113
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path relative to the root of the terraform directory in posix format Use this property to reference the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 102
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 35
          },
          "name": "assetHash",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 37
          },
          "name": "type",
          "type": {
            "fqn": "cdktf.AssetType"
          }
        }
      ],
      "symbolId": "lib/terraform-asset:TerraformAsset"
    },
    "cdktf.TerraformAssetConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformAssetConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 14
      },
      "name": "TerraformAssetConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 16
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 20
          },
          "name": "assetHash",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 18
          },
          "name": "type",
          "optional": true,
          "type": {
            "fqn": "cdktf.AssetType"
          }
        }
      ],
      "symbolId": "lib/terraform-asset:TerraformAssetConfig"
    },
    "cdktf.TerraformBackend": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-backend.ts",
          "line": 9
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-backend.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 14
          },
          "name": "isBackend",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 26
          },
          "name": "getRemoteStateDataSource",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 19
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 48
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 35
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformBackend",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 9
          },
          "name": "name",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-backend:TerraformBackend"
    },
    "cdktf.TerraformDataSource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-data-source.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource",
        "cdktf.ITerraformDependable",
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-data-source.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 92
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 64
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 86
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 60
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 56
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 68
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 80
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 52
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 74
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 142
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 106
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 130
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 113
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 96
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 20
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 21
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 26
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 25
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 28
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 27
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-data-source:TerraformDataSource"
    },
    "cdktf.TerraformElement": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElement",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-element.ts",
          "line": 20
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 64
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Overrides the auto-generated logical ID with a specific ID."
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 53
          },
          "name": "overrideLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The new logical ID to use for this stack element."
              },
              "name": "newLogicalId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 60
          },
          "name": "resetOverrideLogicalId"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 37
          },
          "name": "toMetadata",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 33
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformElement",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 12
          },
          "name": "cdktfStack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 90
          },
          "name": "constructNodeMetadata",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 41
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 13
          },
          "name": "rawOverrides",
          "protected": true,
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-element:TerraformElement"
    },
    "cdktf.TerraformElementMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElementMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 5
      },
      "name": "TerraformElementMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 6
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 8
          },
          "name": "stackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 7
          },
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-element:TerraformElementMetadata"
    },
    "cdktf.TerraformHclModule": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformModule",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-hcl-module.ts",
          "line": 12
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformHclModuleOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 33
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 41
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 45
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 37
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 26
          },
          "name": "set",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 49
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformModule",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "TerraformHclModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 22
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-hcl-module:TerraformHclModule"
    },
    "cdktf.TerraformHclModuleOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModuleOptions",
      "interfaces": [
        "cdktf.TerraformModuleOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 5
      },
      "name": "TerraformHclModuleOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 6
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-hcl-module:TerraformHclModuleOptions"
    },
    "cdktf.TerraformLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-local.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "expression",
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-local.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 59
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 52
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformLocal",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 44
          },
          "name": "asBoolean",
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 40
          },
          "name": "asList",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 36
          },
          "name": "asNumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 32
          },
          "name": "asString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 13
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 24
          },
          "name": "expression",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-local:TerraformLocal"
    },
    "cdktf.TerraformMetaArguments": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformMetaArguments",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 30
      },
      "name": "TerraformMetaArguments",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 32
          },
          "name": "count",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 31
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 34
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 33
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformMetaArguments"
    },
    "cdktf.TerraformModule": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-module.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformModuleOptions"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformDependable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 80
          },
          "name": "addProvider",
          "parameters": [
            {
              "name": "provider",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 72
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 65
          },
          "name": "interpolationForOutput",
          "parameters": [
            {
              "name": "moduleOutput",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 61
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 119
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 88
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 30
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 26
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 76
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 27
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 29
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModule"
    },
    "cdktf.TerraformModuleOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 10
      },
      "name": "TerraformModuleOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 11
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 14
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 13
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 12
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModuleOptions"
    },
    "cdktf.TerraformModuleProvider": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 17
      },
      "name": "TerraformModuleProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 19
          },
          "name": "moduleAlias",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 18
          },
          "name": "provider",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModuleProvider"
    },
    "cdktf.TerraformOutput": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutput",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-output.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformOutputConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 26
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 43
          },
          "name": "isTerrafromOutput",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 90
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 110
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 99
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformOutput",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 47
          },
          "name": "staticId",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 27
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 30
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 28
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 29
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-output:TerraformOutput"
    },
    "cdktf.TerraformOutputConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutputConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 12
      },
      "name": "TerraformOutputConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 13
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 16
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 14
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 15
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 23
          },
          "name": "staticId",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-output:TerraformOutputConfig"
    },
    "cdktf.TerraformProvider": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-provider.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformProviderConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 46
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 74
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 53
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformProvider",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 35
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 41
          },
          "name": "metaAttributes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 14
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 15
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 16
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 26
          },
          "name": "alias",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provider:TerraformProvider"
    },
    "cdktf.TerraformProviderConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProviderConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 7
      },
      "name": "TerraformProviderConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 8
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 9
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 10
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provider:TerraformProviderConfig"
    },
    "cdktf.TerraformProviderGeneratorMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProviderGeneratorMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 37
      },
      "name": "TerraformProviderGeneratorMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 38
          },
          "name": "providerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 39
          },
          "name": "providerVersionConstraint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformProviderGeneratorMetadata"
    },
    "cdktf.TerraformRemoteState": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-remote-state.ts",
          "line": 21
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "backend",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 52
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 48
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 44
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 40
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 36
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 90
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 73
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformRemoteState",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 18
          },
          "name": "tfResourceType",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 19
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-remote-state:TerraformRemoteState"
    },
    "cdktf.TerraformResource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-resource.ts",
          "line": 62
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource",
        "cdktf.ITerraformDependable",
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 47
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 123
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 95
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 117
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 91
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 87
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 99
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 111
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 83
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 105
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 174
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 137
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 162
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 144
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformResource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 60
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 127
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 51
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 52
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 57
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 56
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 59
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 58
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResource"
    },
    "cdktf.TerraformResourceConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceConfig",
      "interfaces": [
        "cdktf.TerraformMetaArguments"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 42
      },
      "name": "TerraformResourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 43
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 44
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResourceConfig"
    },
    "cdktf.TerraformResourceLifecycle": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceLifecycle",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 24
      },
      "name": "TerraformResourceLifecycle",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 25
          },
          "name": "createBeforeDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 27
          },
          "name": "ignoreChanges",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 26
          },
          "name": "preventDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResourceLifecycle"
    },
    "cdktf.TerraformStack": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStack",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-stack.ts",
          "line": 46
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 58
          },
          "name": "isStack",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 62
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformStack"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 298
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "dependency",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 135
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "By default, uses\nthe `HashedAddressingScheme` but this method can be overridden to customize\nthis behavior.",
            "stability": "experimental",
            "summary": "Returns the naming scheme used to allocate logical IDs."
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 173
          },
          "name": "allocateLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The element for which the logical ID is allocated."
              },
              "name": "tfElement",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformElement"
                    },
                    {
                      "fqn": "constructs.Node"
                    }
                  ]
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 195
          },
          "name": "allProviders",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "cdktf.TerraformProvider"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 291
          },
          "name": "dependsOn",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 199
          },
          "name": "ensureBackendExists",
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformBackend"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 161
          },
          "name": "getLogicalId",
          "parameters": [
            {
              "name": "tfElement",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformElement"
                    },
                    {
                      "fqn": "constructs.Node"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 126
          },
          "name": "prepareStack"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 273
          },
          "name": "registerIncomingCrossStackReference",
          "parameters": [
            {
              "name": "fromStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 255
          },
          "name": "registerOutgoingCrossStackReference",
          "parameters": [
            {
              "name": "identifier",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformOutput"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 206
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformStack",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 44
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformStack"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 43
          },
          "name": "synthesizer",
          "type": {
            "fqn": "cdktf.IStackSynthesizer"
          }
        }
      ],
      "symbolId": "lib/terraform-stack:TerraformStack"
    },
    "cdktf.TerraformStackMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStackMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 31
      },
      "name": "TerraformStackMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 34
          },
          "name": "backend",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 32
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 33
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-stack:TerraformStackMetadata"
    },
    "cdktf.TerraformVariable": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariable",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-variable.ts",
          "line": 103
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformVariableConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 91
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 138
          },
          "name": "synthesizeAttributes",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 148
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformVariable",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 126
          },
          "name": "booleanValue",
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 101
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 122
          },
          "name": "listValue",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 118
          },
          "name": "numberValue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 114
          },
          "name": "stringValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 130
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 95
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 96
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 99
          },
          "name": "nullable",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 98
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 97
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-variable:TerraformVariable"
    },
    "cdktf.TerraformVariableConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariableConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 54
      },
      "name": "TerraformVariableConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 55
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 56
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 88
          },
          "name": "nullable",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 83
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n- string\n- number\n- bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n- list(\\<TYPE\\>)\n- set(\\<TYPE\\>)\n- map(\\<TYPE\\>)\n- object({\\<ATTR NAME\\> = \\<TYPE\\>, ... })\n- tuple([\\<TYPE\\>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type.",
            "stability": "experimental",
            "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 81
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-variable:TerraformVariableConfig"
    },
    "cdktf.Testing": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Testing utilities for cdktf applications."
      },
      "fqn": "cdktf.Testing",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 35
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 40
          },
          "name": "app",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.TestingAppOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 77
          },
          "name": "enableFutureFlags",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 72
          },
          "name": "fakeCdktfJsonPath",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 124
          },
          "name": "fullSynth",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 139
          },
          "name": "renderConstructTree",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 166
          },
          "name": "setupJest",
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 66
          },
          "name": "stubVersion",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the Terraform synthesized JSON."
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 94
          },
          "name": "synth",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 85
          },
          "name": "synthScope",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "cdktf.IScopeCallback"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Testing",
      "symbolId": "lib/testing/index:Testing"
    },
    "cdktf.TestingAppOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TestingAppOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 17
      },
      "name": "TestingAppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 21
          },
          "name": "enableFutureFlags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 22
          },
          "name": "fakeCdktfJsonPath",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 18
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 19
          },
          "name": "stackTraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 20
          },
          "name": "stubVersion",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/testing/index:TestingAppOptions"
    },
    "cdktf.Token": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics.",
        "stability": "experimental",
        "summary": "Represents a special or lazily-evaluated value."
      },
      "fqn": "cdktf.Token",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a resolvable representation of the given value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 160
          },
          "name": "asAny",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 150
          },
          "name": "asAnyMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 138
          },
          "name": "asBooleanMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible list representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 75
          },
          "name": "asList",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 98
          },
          "name": "asMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "mapValue",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible number representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 65
          },
          "name": "asNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible list representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 88
          },
          "name": "asNumberList",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 128
          },
          "name": "asNumberMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string.",
            "stability": "experimental",
            "summary": "Return a reversible string representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 51
          },
          "name": "asString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 116
          },
          "name": "asStringMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "One of these must be true:\n\n- `obj` is an IResolvable\n- `obj` is a string containing at least one encoded `IResolvable`\n- `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables.",
            "stability": "experimental",
            "summary": "Returns true if obj represents an unresolved value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 36
          },
          "name": "isUnresolved",
          "parameters": [
            {
              "docs": {
                "summary": "The object to test."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Token",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 145
          },
          "name": "ANY_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 123
          },
          "name": "NUMBER_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 111
          },
          "name": "STRING_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/token:Token"
    },
    "cdktf.Tokenization": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Less oft-needed functions to manipulate Tokens."
      },
      "fqn": "cdktf.Tokenization",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 168
      },
      "methods": [
        {
          "docs": {
            "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject.",
            "stability": "experimental",
            "summary": "Return whether the given object is an IResolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 255
          },
          "name": "isResolvable",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected.",
            "stability": "experimental",
            "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 240
          },
          "name": "resolve",
          "parameters": [
            {
              "docs": {
                "summary": "The object to resolve."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "Prefix key path components for diagnostics."
              },
              "name": "options",
              "type": {
                "fqn": "cdktf.ResolveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reverse any value into Resolvables, if possible."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 172
          },
          "name": "reverse",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "cdktf.IResolvable"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a list."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 215
          },
          "name": "reverseList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a map."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 229
          },
          "name": "reverseMap",
          "parameters": [
            {
              "name": "m",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a number."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 208
          },
          "name": "reverseNumber",
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a list."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 222
          },
          "name": "reverseNumberList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a string potentially containing encoded tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 201
          },
          "name": "reverseString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is.",
            "stability": "experimental",
            "summary": "Stringify a number directly or lazily if it's a Token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 266
          },
          "name": "stringifyNumber",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Tokenization",
      "symbolId": "lib/tokens/token:Tokenization"
    },
    "cdktf.TokenizedStringFragments": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Fragments of a concatenated string containing stringified Tokens."
      },
      "fqn": "cdktf.TokenizedStringFragments",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an intrinsic fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 67
          },
          "name": "addIntrinsic",
          "parameters": [
            {
              "docs": {
                "summary": "the intrinsic value to add."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a literal fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 51
          },
          "name": "addLiteral",
          "parameters": [
            {
              "docs": {
                "summary": "the literal to add."
              },
              "name": "lit",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a token fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 59
          },
          "name": "addToken",
          "parameters": [
            {
              "docs": {
                "summary": "the token to add."
              },
              "name": "token",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If there are any",
            "stability": "experimental",
            "summary": "Combine the string fragments using the given joiner."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 144
          },
          "name": "join",
          "parameters": [
            {
              "name": "concat",
              "type": {
                "fqn": "cdktf.IFragmentConcatenator"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Apply a transformation function to all tokens in the string."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 113
          },
          "name": "mapTokens",
          "parameters": [
            {
              "name": "mapper",
              "type": {
                "fqn": "cdktf.ITokenMapper"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          }
        }
      ],
      "name": "TokenizedStringFragments",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 36
          },
          "name": "firstValue",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all intrinsic fragments from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 100
          },
          "name": "intrinsic",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the number of fragments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 43
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all literals from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 87
          },
          "name": "literals",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all Tokens from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 74
          },
          "name": "tokens",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 25
          },
          "name": "firstToken",
          "optional": true,
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        }
      ],
      "symbolId": "lib/tokens/string-fragments:TokenizedStringFragments"
    },
    "cdktf.VariableType": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.VariableType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 31
          },
          "name": "list",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 35
          },
          "name": "map",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 47
          },
          "name": "object",
          "parameters": [
            {
              "name": "attributes",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 39
          },
          "name": "set",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 43
          },
          "name": "tuple",
          "parameters": [
            {
              "name": "elements",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        }
      ],
      "name": "VariableType",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 13
          },
          "name": "ANY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 12
          },
          "name": "BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 15
          },
          "name": "LIST",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 21
          },
          "name": "LIST_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 20
          },
          "name": "LIST_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 19
          },
          "name": "LIST_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 16
          },
          "name": "MAP",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 25
          },
          "name": "MAP_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 24
          },
          "name": "MAP_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 23
          },
          "name": "MAP_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 11
          },
          "name": "NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 17
          },
          "name": "SET",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 29
          },
          "name": "SET_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 28
          },
          "name": "SET_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 27
          },
          "name": "SET_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 10
          },
          "name": "STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-variable:VariableType"
    },
    "cdktf.testingMatchers.TerraformConstructor": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.testingMatchers.TerraformConstructor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/matchers.ts",
        "line": 8
      },
      "name": "TerraformConstructor",
      "namespace": "testingMatchers",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/matchers.ts",
            "line": 10
          },
          "name": "tfResourceType",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/testing/matchers:TerraformConstructor"
    }
  },
  "version": "0.9.0",
  "fingerprint": "iSwaETRi+3IVMISlb1Ws25ekI0JEWCI2gBXdDyTQQ3k="
}
