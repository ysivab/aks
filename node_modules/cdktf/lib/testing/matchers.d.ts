/**
 * @experimental
 */
export interface TerraformConstructor {
    new (...args: any[]): any;
    /**
     * @experimental
     */
    readonly tfResourceType: string;
}
export declare type SynthesizedStack = {
    resource: Record<string, any>;
    data: Record<string, any>;
};
export declare type MatcherReturn = {
    message: () => string;
    pass: boolean;
};
export declare function asymetricDeepEqualIgnoringObjectCasing(expected: unknown, received: unknown): boolean;
export declare function getToHaveDataSourceWithProperties(customPassEvaluation?: (items: any, assertedProperties: Record<string, any>) => boolean): (received: string, resourceType: TerraformConstructor, properties?: Record<string, any>) => MatcherReturn;
export declare function getToHaveResourceWithProperties(customPassEvaluation?: (items: any, assertedProperties: Record<string, any>) => boolean): (received: string, resourceType: TerraformConstructor, properties?: Record<string, any>) => MatcherReturn;
export declare function toBeValidTerraform(received: string): MatcherReturn;
export declare function toPlanSuccessfully(received: string): MatcherReturn;
