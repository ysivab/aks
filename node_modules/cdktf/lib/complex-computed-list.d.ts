import { IResolvable } from "./tokens";
import { IInterpolatingParent } from "./terraform-addressable";
declare abstract class ComplexComputedAttribute implements IInterpolatingParent {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string);
    /**
     * @experimental
     */
    getStringAttribute(terraformAttribute: string): string;
    /**
     * @experimental
     */
    getNumberAttribute(terraformAttribute: string): number;
    /**
     * @experimental
     */
    getListAttribute(terraformAttribute: string): string[];
    /**
     * @experimental
     */
    getBooleanAttribute(terraformAttribute: string): IResolvable;
    /**
     * @experimental
     */
    getNumberListAttribute(terraformAttribute: string): number[];
    /**
     * @experimental
     */
    getStringMapAttribute(terraformAttribute: string): {
        [key: string]: string;
    };
    /**
     * @experimental
     */
    getNumberMapAttribute(terraformAttribute: string): {
        [key: string]: number;
    };
    /**
     * @experimental
     */
    getBooleanMapAttribute(terraformAttribute: string): {
        [key: string]: boolean;
    };
    /**
     * @experimental
     */
    getAnyMapAttribute(terraformAttribute: string): {
        [key: string]: any;
    };
    abstract interpolationForAttribute(terraformAttribute: string): any;
}
/**
 * @experimental
 */
export declare class StringMap {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string);
    /**
     * @experimental
     */
    lookup(key: string): string;
}
/**
 * @experimental
 */
export declare class NumberMap {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string);
    /**
     * @experimental
     */
    lookup(key: string): number;
}
/**
 * @experimental
 */
export declare class BooleanMap {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string);
    /**
     * @experimental
     */
    lookup(key: string): IResolvable;
}
/**
 * @experimental
 */
export declare class AnyMap {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string);
    /**
     * @experimental
     */
    lookup(key: string): any;
}
/**
 * @experimental
 */
export declare class ComplexComputedList extends ComplexComputedAttribute {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    protected complexComputedListIndex: string;
    protected wrapsSet?: boolean | undefined;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string, complexComputedListIndex: string, wrapsSet?: boolean | undefined);
    /**
     * @experimental
     */
    interpolationForAttribute(property: string): IResolvable;
}
/**
 * @experimental
 */
export declare class ComplexObject extends ComplexComputedAttribute {
    protected terraformResource: IInterpolatingParent;
    protected terraformAttribute: string;
    protected isSingleItem: boolean;
    /**
     * @experimental
     */
    constructor(terraformResource: IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @experimental
     */
    interpolationForAttribute(property: string): IResolvable;
    /**
     * @experimental
     */
    protected interpolationAsList(): IResolvable;
}
export {};
