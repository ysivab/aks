import { Construct } from "constructs";
import { TerraformBackend } from "../terraform-backend";
import { TerraformRemoteState, DataTerraformRemoteStateConfig } from "../terraform-remote-state";
/**
 * @experimental
 */
export declare class SwiftBackend extends TerraformBackend {
    private readonly props;
    /**
     * @experimental
     */
    constructor(scope: Construct, props: SwiftBackendProps);
    /**
     * @experimental
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    /**
     * (experimental) Creates a TerraformRemoteState resource that accesses this backend.
     *
     * @experimental
     */
    getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState;
}
/**
 * @experimental
 */
export declare class DataTerraformRemoteStateSwift extends TerraformRemoteState {
    /**
     * @experimental
     */
    constructor(scope: Construct, id: string, config: DataTerraformRemoteStateSwiftConfig);
}
/**
 * @experimental
 */
export interface SwiftBackendProps {
    /**
     * @experimental
     */
    readonly authUrl?: string;
    /**
     * @experimental
     */
    readonly cloud?: string;
    /**
     * @experimental
     */
    readonly container: string;
    /**
     * @experimental
     */
    readonly stateName?: string;
    /**
     * @experimental
     */
    readonly userName?: string;
    /**
     * @experimental
     */
    readonly userId?: string;
    /**
     * @experimental
     */
    readonly password?: string;
    /**
     * @experimental
     */
    readonly applicationCredentialId?: string;
    /**
     * @experimental
     */
    readonly applicationCredentialName?: string;
    /**
     * @experimental
     */
    readonly applicationCredentialSecret?: string;
    /**
     * @experimental
     */
    readonly token?: string;
    /**
     * @experimental
     */
    readonly regionName?: string;
    /**
     * @experimental
     */
    readonly tenantId?: string;
    /**
     * @experimental
     */
    readonly tenantName?: string;
    /**
     * @experimental
     */
    readonly domainId?: string;
    /**
     * @experimental
     */
    readonly domainName?: string;
    /**
     * @experimental
     */
    readonly userDomainName?: string;
    /**
     * @experimental
     */
    readonly userDomainId?: string;
    /**
     * @experimental
     */
    readonly projectDomainName?: string;
    /**
     * @experimental
     */
    readonly projectDomainId?: string;
    /**
     * @experimental
     */
    readonly defaultDomain?: string;
    /**
     * @experimental
     */
    readonly insecure?: boolean;
    /**
     * @experimental
     */
    readonly cacertFile?: string;
    /**
     * @experimental
     */
    readonly cert?: string;
    /**
     * @experimental
     */
    readonly key?: string;
    /**
     * @experimental
     */
    readonly archiveContainer?: string;
    /**
     * @experimental
     */
    readonly expireAfter?: string;
}
/**
 * @experimental
 */
export interface DataTerraformRemoteStateSwiftConfig extends DataTerraformRemoteStateConfig, SwiftBackendProps {
}
