import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface AppServiceCertificateBindingConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#certificate_id AppServiceCertificateBinding#certificate_id}
    */
    readonly certificateId: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#hostname_binding_id AppServiceCertificateBinding#hostname_binding_id}
    */
    readonly hostnameBindingId: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#ssl_state AppServiceCertificateBinding#ssl_state}
    */
    readonly sslState: string;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#timeouts AppServiceCertificateBinding#timeouts}
    */
    readonly timeouts?: AppServiceCertificateBindingTimeouts;
}
export interface AppServiceCertificateBindingTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#create AppServiceCertificateBinding#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#delete AppServiceCertificateBinding#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding#read AppServiceCertificateBinding#read}
    */
    readonly read?: string;
}
export declare function appServiceCertificateBindingTimeoutsToTerraform(struct?: AppServiceCertificateBindingTimeoutsOutputReference | AppServiceCertificateBindingTimeouts | cdktf.IResolvable): any;
export declare class AppServiceCertificateBindingTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): AppServiceCertificateBindingTimeouts | undefined;
    set internalValue(value: AppServiceCertificateBindingTimeouts | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _read?;
    get read(): string;
    set read(value: string);
    resetRead(): void;
    get readInput(): string | undefined;
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding azurerm_app_service_certificate_binding}
*/
export declare class AppServiceCertificateBinding extends cdktf.TerraformResource {
    static readonly tfResourceType: string;
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/azurerm/r/app_service_certificate_binding azurerm_app_service_certificate_binding} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppServiceCertificateBindingConfig
    */
    constructor(scope: Construct, id: string, config: AppServiceCertificateBindingConfig);
    get appServiceName(): string;
    private _certificateId?;
    get certificateId(): string;
    set certificateId(value: string);
    get certificateIdInput(): string | undefined;
    get hostname(): string;
    private _hostnameBindingId?;
    get hostnameBindingId(): string;
    set hostnameBindingId(value: string);
    get hostnameBindingIdInput(): string | undefined;
    get id(): string;
    private _sslState?;
    get sslState(): string;
    set sslState(value: string);
    get sslStateInput(): string | undefined;
    get thumbprint(): string;
    private _timeouts;
    get timeouts(): AppServiceCertificateBindingTimeoutsOutputReference;
    putTimeouts(value: AppServiceCertificateBindingTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): AppServiceCertificateBindingTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
