import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface ActiveDirectoryDomainServiceConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#domain_name ActiveDirectoryDomainService#domain_name}
    */
    readonly domainName: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#filtered_sync_enabled ActiveDirectoryDomainService#filtered_sync_enabled}
    */
    readonly filteredSyncEnabled?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#location ActiveDirectoryDomainService#location}
    */
    readonly location: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#name ActiveDirectoryDomainService#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#resource_group_name ActiveDirectoryDomainService#resource_group_name}
    */
    readonly resourceGroupName: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#sku ActiveDirectoryDomainService#sku}
    */
    readonly sku: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#tags ActiveDirectoryDomainService#tags}
    */
    readonly tags?: {
        [key: string]: string;
    };
    /**
    * initial_replica_set block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#initial_replica_set ActiveDirectoryDomainService#initial_replica_set}
    */
    readonly initialReplicaSet: ActiveDirectoryDomainServiceInitialReplicaSet;
    /**
    * notifications block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#notifications ActiveDirectoryDomainService#notifications}
    */
    readonly notifications?: ActiveDirectoryDomainServiceNotifications;
    /**
    * secure_ldap block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#secure_ldap ActiveDirectoryDomainService#secure_ldap}
    */
    readonly secureLdap?: ActiveDirectoryDomainServiceSecureLdap;
    /**
    * security block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#security ActiveDirectoryDomainService#security}
    */
    readonly security?: ActiveDirectoryDomainServiceSecurity;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#timeouts ActiveDirectoryDomainService#timeouts}
    */
    readonly timeouts?: ActiveDirectoryDomainServiceTimeouts;
}
export interface ActiveDirectoryDomainServiceInitialReplicaSet {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#subnet_id ActiveDirectoryDomainService#subnet_id}
    */
    readonly subnetId: string;
}
export declare function activeDirectoryDomainServiceInitialReplicaSetToTerraform(struct?: ActiveDirectoryDomainServiceInitialReplicaSetOutputReference | ActiveDirectoryDomainServiceInitialReplicaSet): any;
export declare class ActiveDirectoryDomainServiceInitialReplicaSetOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): ActiveDirectoryDomainServiceInitialReplicaSet | undefined;
    set internalValue(value: ActiveDirectoryDomainServiceInitialReplicaSet | undefined);
    get domainControllerIpAddresses(): string[];
    get externalAccessIpAddress(): string;
    get id(): string;
    get location(): string;
    get serviceStatus(): string;
    private _subnetId?;
    get subnetId(): string;
    set subnetId(value: string);
    get subnetIdInput(): string | undefined;
}
export interface ActiveDirectoryDomainServiceNotifications {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#additional_recipients ActiveDirectoryDomainService#additional_recipients}
    */
    readonly additionalRecipients?: string[];
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#notify_dc_admins ActiveDirectoryDomainService#notify_dc_admins}
    */
    readonly notifyDcAdmins?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#notify_global_admins ActiveDirectoryDomainService#notify_global_admins}
    */
    readonly notifyGlobalAdmins?: boolean | cdktf.IResolvable;
}
export declare function activeDirectoryDomainServiceNotificationsToTerraform(struct?: ActiveDirectoryDomainServiceNotificationsOutputReference | ActiveDirectoryDomainServiceNotifications): any;
export declare class ActiveDirectoryDomainServiceNotificationsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): ActiveDirectoryDomainServiceNotifications | undefined;
    set internalValue(value: ActiveDirectoryDomainServiceNotifications | undefined);
    private _additionalRecipients?;
    get additionalRecipients(): string[];
    set additionalRecipients(value: string[]);
    resetAdditionalRecipients(): void;
    get additionalRecipientsInput(): string[] | undefined;
    private _notifyDcAdmins?;
    get notifyDcAdmins(): boolean | cdktf.IResolvable;
    set notifyDcAdmins(value: boolean | cdktf.IResolvable);
    resetNotifyDcAdmins(): void;
    get notifyDcAdminsInput(): boolean | cdktf.IResolvable | undefined;
    private _notifyGlobalAdmins?;
    get notifyGlobalAdmins(): boolean | cdktf.IResolvable;
    set notifyGlobalAdmins(value: boolean | cdktf.IResolvable);
    resetNotifyGlobalAdmins(): void;
    get notifyGlobalAdminsInput(): boolean | cdktf.IResolvable | undefined;
}
export interface ActiveDirectoryDomainServiceSecureLdap {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#enabled ActiveDirectoryDomainService#enabled}
    */
    readonly enabled: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#external_access_enabled ActiveDirectoryDomainService#external_access_enabled}
    */
    readonly externalAccessEnabled?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#pfx_certificate ActiveDirectoryDomainService#pfx_certificate}
    */
    readonly pfxCertificate: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#pfx_certificate_password ActiveDirectoryDomainService#pfx_certificate_password}
    */
    readonly pfxCertificatePassword: string;
}
export declare function activeDirectoryDomainServiceSecureLdapToTerraform(struct?: ActiveDirectoryDomainServiceSecureLdapOutputReference | ActiveDirectoryDomainServiceSecureLdap): any;
export declare class ActiveDirectoryDomainServiceSecureLdapOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): ActiveDirectoryDomainServiceSecureLdap | undefined;
    set internalValue(value: ActiveDirectoryDomainServiceSecureLdap | undefined);
    get certificateExpiry(): string;
    get certificateThumbprint(): string;
    private _enabled?;
    get enabled(): boolean | cdktf.IResolvable;
    set enabled(value: boolean | cdktf.IResolvable);
    get enabledInput(): boolean | cdktf.IResolvable | undefined;
    private _externalAccessEnabled?;
    get externalAccessEnabled(): boolean | cdktf.IResolvable;
    set externalAccessEnabled(value: boolean | cdktf.IResolvable);
    resetExternalAccessEnabled(): void;
    get externalAccessEnabledInput(): boolean | cdktf.IResolvable | undefined;
    private _pfxCertificate?;
    get pfxCertificate(): string;
    set pfxCertificate(value: string);
    get pfxCertificateInput(): string | undefined;
    private _pfxCertificatePassword?;
    get pfxCertificatePassword(): string;
    set pfxCertificatePassword(value: string);
    get pfxCertificatePasswordInput(): string | undefined;
    get publicCertificate(): string;
}
export interface ActiveDirectoryDomainServiceSecurity {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#ntlm_v1_enabled ActiveDirectoryDomainService#ntlm_v1_enabled}
    */
    readonly ntlmV1Enabled?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#sync_kerberos_passwords ActiveDirectoryDomainService#sync_kerberos_passwords}
    */
    readonly syncKerberosPasswords?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#sync_ntlm_passwords ActiveDirectoryDomainService#sync_ntlm_passwords}
    */
    readonly syncNtlmPasswords?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#sync_on_prem_passwords ActiveDirectoryDomainService#sync_on_prem_passwords}
    */
    readonly syncOnPremPasswords?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#tls_v1_enabled ActiveDirectoryDomainService#tls_v1_enabled}
    */
    readonly tlsV1Enabled?: boolean | cdktf.IResolvable;
}
export declare function activeDirectoryDomainServiceSecurityToTerraform(struct?: ActiveDirectoryDomainServiceSecurityOutputReference | ActiveDirectoryDomainServiceSecurity): any;
export declare class ActiveDirectoryDomainServiceSecurityOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): ActiveDirectoryDomainServiceSecurity | undefined;
    set internalValue(value: ActiveDirectoryDomainServiceSecurity | undefined);
    private _ntlmV1Enabled?;
    get ntlmV1Enabled(): boolean | cdktf.IResolvable;
    set ntlmV1Enabled(value: boolean | cdktf.IResolvable);
    resetNtlmV1Enabled(): void;
    get ntlmV1EnabledInput(): boolean | cdktf.IResolvable | undefined;
    private _syncKerberosPasswords?;
    get syncKerberosPasswords(): boolean | cdktf.IResolvable;
    set syncKerberosPasswords(value: boolean | cdktf.IResolvable);
    resetSyncKerberosPasswords(): void;
    get syncKerberosPasswordsInput(): boolean | cdktf.IResolvable | undefined;
    private _syncNtlmPasswords?;
    get syncNtlmPasswords(): boolean | cdktf.IResolvable;
    set syncNtlmPasswords(value: boolean | cdktf.IResolvable);
    resetSyncNtlmPasswords(): void;
    get syncNtlmPasswordsInput(): boolean | cdktf.IResolvable | undefined;
    private _syncOnPremPasswords?;
    get syncOnPremPasswords(): boolean | cdktf.IResolvable;
    set syncOnPremPasswords(value: boolean | cdktf.IResolvable);
    resetSyncOnPremPasswords(): void;
    get syncOnPremPasswordsInput(): boolean | cdktf.IResolvable | undefined;
    private _tlsV1Enabled?;
    get tlsV1Enabled(): boolean | cdktf.IResolvable;
    set tlsV1Enabled(value: boolean | cdktf.IResolvable);
    resetTlsV1Enabled(): void;
    get tlsV1EnabledInput(): boolean | cdktf.IResolvable | undefined;
}
export interface ActiveDirectoryDomainServiceTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#create ActiveDirectoryDomainService#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#delete ActiveDirectoryDomainService#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#read ActiveDirectoryDomainService#read}
    */
    readonly read?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service#update ActiveDirectoryDomainService#update}
    */
    readonly update?: string;
}
export declare function activeDirectoryDomainServiceTimeoutsToTerraform(struct?: ActiveDirectoryDomainServiceTimeoutsOutputReference | ActiveDirectoryDomainServiceTimeouts | cdktf.IResolvable): any;
export declare class ActiveDirectoryDomainServiceTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): ActiveDirectoryDomainServiceTimeouts | undefined;
    set internalValue(value: ActiveDirectoryDomainServiceTimeouts | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _read?;
    get read(): string;
    set read(value: string);
    resetRead(): void;
    get readInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service azurerm_active_directory_domain_service}
*/
export declare class ActiveDirectoryDomainService extends cdktf.TerraformResource {
    static readonly tfResourceType: string;
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/azurerm/r/active_directory_domain_service azurerm_active_directory_domain_service} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ActiveDirectoryDomainServiceConfig
    */
    constructor(scope: Construct, id: string, config: ActiveDirectoryDomainServiceConfig);
    get deploymentId(): string;
    private _domainName?;
    get domainName(): string;
    set domainName(value: string);
    get domainNameInput(): string | undefined;
    private _filteredSyncEnabled?;
    get filteredSyncEnabled(): boolean | cdktf.IResolvable;
    set filteredSyncEnabled(value: boolean | cdktf.IResolvable);
    resetFilteredSyncEnabled(): void;
    get filteredSyncEnabledInput(): boolean | cdktf.IResolvable | undefined;
    get id(): string;
    private _location?;
    get location(): string;
    set location(value: string);
    get locationInput(): string | undefined;
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _resourceGroupName?;
    get resourceGroupName(): string;
    set resourceGroupName(value: string);
    get resourceGroupNameInput(): string | undefined;
    get resourceId(): string;
    private _sku?;
    get sku(): string;
    set sku(value: string);
    get skuInput(): string | undefined;
    get syncOwner(): string;
    private _tags?;
    get tags(): {
        [key: string]: string;
    };
    set tags(value: {
        [key: string]: string;
    });
    resetTags(): void;
    get tagsInput(): {
        [key: string]: string;
    } | undefined;
    get tenantId(): string;
    get version(): number;
    private _initialReplicaSet;
    get initialReplicaSet(): ActiveDirectoryDomainServiceInitialReplicaSetOutputReference;
    putInitialReplicaSet(value: ActiveDirectoryDomainServiceInitialReplicaSet): void;
    get initialReplicaSetInput(): ActiveDirectoryDomainServiceInitialReplicaSet | undefined;
    private _notifications;
    get notifications(): ActiveDirectoryDomainServiceNotificationsOutputReference;
    putNotifications(value: ActiveDirectoryDomainServiceNotifications): void;
    resetNotifications(): void;
    get notificationsInput(): ActiveDirectoryDomainServiceNotifications | undefined;
    private _secureLdap;
    get secureLdap(): ActiveDirectoryDomainServiceSecureLdapOutputReference;
    putSecureLdap(value: ActiveDirectoryDomainServiceSecureLdap): void;
    resetSecureLdap(): void;
    get secureLdapInput(): ActiveDirectoryDomainServiceSecureLdap | undefined;
    private _security;
    get security(): ActiveDirectoryDomainServiceSecurityOutputReference;
    putSecurity(value: ActiveDirectoryDomainServiceSecurity): void;
    resetSecurity(): void;
    get securityInput(): ActiveDirectoryDomainServiceSecurity | undefined;
    private _timeouts;
    get timeouts(): ActiveDirectoryDomainServiceTimeoutsOutputReference;
    putTimeouts(value: ActiveDirectoryDomainServiceTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): ActiveDirectoryDomainServiceTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
