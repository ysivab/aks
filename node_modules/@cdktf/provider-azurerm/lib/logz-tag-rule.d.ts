import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface LogzTagRuleConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#logz_monitor_id LogzTagRule#logz_monitor_id}
    */
    readonly logzMonitorId: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#send_aad_logs LogzTagRule#send_aad_logs}
    */
    readonly sendAadLogs?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#send_activity_logs LogzTagRule#send_activity_logs}
    */
    readonly sendActivityLogs?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#send_subscription_logs LogzTagRule#send_subscription_logs}
    */
    readonly sendSubscriptionLogs?: boolean | cdktf.IResolvable;
    /**
    * tag_filter block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#tag_filter LogzTagRule#tag_filter}
    */
    readonly tagFilter?: LogzTagRuleTagFilter[] | cdktf.IResolvable;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#timeouts LogzTagRule#timeouts}
    */
    readonly timeouts?: LogzTagRuleTimeouts;
}
export interface LogzTagRuleTagFilter {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#action LogzTagRule#action}
    */
    readonly action: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#name LogzTagRule#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#value LogzTagRule#value}
    */
    readonly value?: string;
}
export declare function logzTagRuleTagFilterToTerraform(struct?: LogzTagRuleTagFilter | cdktf.IResolvable): any;
export interface LogzTagRuleTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#create LogzTagRule#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#delete LogzTagRule#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#read LogzTagRule#read}
    */
    readonly read?: string;
    /**
    * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule#update LogzTagRule#update}
    */
    readonly update?: string;
}
export declare function logzTagRuleTimeoutsToTerraform(struct?: LogzTagRuleTimeoutsOutputReference | LogzTagRuleTimeouts | cdktf.IResolvable): any;
export declare class LogzTagRuleTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param isSingleItem True if this is a block, false if it's a list
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, isSingleItem: boolean);
    get internalValue(): LogzTagRuleTimeouts | undefined;
    set internalValue(value: LogzTagRuleTimeouts | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _read?;
    get read(): string;
    set read(value: string);
    resetRead(): void;
    get readInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule azurerm_logz_tag_rule}
*/
export declare class LogzTagRule extends cdktf.TerraformResource {
    static readonly tfResourceType: string;
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/azurerm/r/logz_tag_rule azurerm_logz_tag_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LogzTagRuleConfig
    */
    constructor(scope: Construct, id: string, config: LogzTagRuleConfig);
    get id(): string;
    private _logzMonitorId?;
    get logzMonitorId(): string;
    set logzMonitorId(value: string);
    get logzMonitorIdInput(): string | undefined;
    private _sendAadLogs?;
    get sendAadLogs(): boolean | cdktf.IResolvable;
    set sendAadLogs(value: boolean | cdktf.IResolvable);
    resetSendAadLogs(): void;
    get sendAadLogsInput(): boolean | cdktf.IResolvable | undefined;
    private _sendActivityLogs?;
    get sendActivityLogs(): boolean | cdktf.IResolvable;
    set sendActivityLogs(value: boolean | cdktf.IResolvable);
    resetSendActivityLogs(): void;
    get sendActivityLogsInput(): boolean | cdktf.IResolvable | undefined;
    private _sendSubscriptionLogs?;
    get sendSubscriptionLogs(): boolean | cdktf.IResolvable;
    set sendSubscriptionLogs(value: boolean | cdktf.IResolvable);
    resetSendSubscriptionLogs(): void;
    get sendSubscriptionLogsInput(): boolean | cdktf.IResolvable | undefined;
    private _tagFilter?;
    get tagFilter(): LogzTagRuleTagFilter[] | cdktf.IResolvable;
    set tagFilter(value: LogzTagRuleTagFilter[] | cdktf.IResolvable);
    resetTagFilter(): void;
    get tagFilterInput(): cdktf.IResolvable | LogzTagRuleTagFilter[] | undefined;
    private _timeouts;
    get timeouts(): LogzTagRuleTimeoutsOutputReference;
    putTimeouts(value: LogzTagRuleTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): LogzTagRuleTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
